locus.copy <- as.integer(L2.copy) + as.integer(L3.copy)
}
}else{
locus.copy <- copyCall.df[x,currentLocus]
if( locus.copy == 'R' ){
return('failed')
}else{
locus.copy <- as.integer(locus.copy)
}
}
locus.call.bool <- !is.na(locus.call) & locus.call != 'failed' & locus.call != ''
locus.call.unresolved <- grepl('new',locus.call)
if( locus.call.unresolved ){
locus.call <- paste0(currentLocus,'*',locus.call)
}
if( locus.call.bool ){
locus.het.bool <- grepl('+',locus.call,fixed=T)
}
if( locus.call.bool ){
if( !locus.het.bool ){
locus.allele1.vect <- strsplit(locus.call,' ',fixed=T)[[1]]
if( locus.copy > 1 ){
locus.call.mat <- combinations(length(locus.allele1.vect), locus.copy, locus.allele1.vect,repeats.allowed = T)
locus.call.vect <- apply( locus.call.mat, 1, paste0, collapse='+')
}else{
locus.call.vect <- apply( expand.grid( locus.allele1.vect, paste0(currentLocus,'*null') ), 1, paste0, collapse='+' )
#locus.call.vect <- locus.allele1.vect
}
}else{
locus.hetCall.vect <- tstrsplit(locus.call,' ',fixed=T)
#locus.hetCall.list <- tstrsplit(locus.hetCall.vect,'+',fixed=T)
#locus.call.vect <- apply( unique( expand.grid(locus.hetCall.list) ), 1, function(x) paste0(x,collapse='+'))
locus.call.vect <- unlist( locus.hetCall.vect )
}
}else if(locus.copy == 0){
locus.call.vect <- paste0(currentLocus,'*null+',currentLocus,'*null')
}else{
locus.call.vect <- 'failed'
}
if( length(locus.call.vect) > 64 ){
locus.call.str <- 'failed'
}else{
locus.call.str <- paste0(locus.call.vect, collapse=' ')
}
return(locus.call.str)
})
iterCall.df[names(locus.call.list),currentLocus] <- unlist( locus.call.list )
}
return(iterCall.df)
}
validGenoCall.df
pingValid.combineS35 <- function( iterCall.df, copyCall.df ){
S35.call.list <- sapply( rownames( iterCall.df ), function(x){
#cat('\n',x)
S3.call <- iterCall.df[x,'KIR2DS3']
S5.call <- iterCall.df[x,'KIR2DS5']
S3.copy <- copyCall.df[x,'KIR2DS3']
S5.copy <- copyCall.df[x,'KIR2DS5']
if(S3.copy == 'R' | S5.copy == 'R'){
return('failed')
}else{
S3.copy <- as.integer(S3.copy)
S5.copy <- as.integer(S5.copy)
}
S3.call.bool <- !is.na(S3.call) & S3.call != 'failed' & S3.call != ''
S3.call.unresolved <- grepl('new',S3.call)
S5.call.bool <- !is.na(S5.call) & S5.call != 'failed' & S5.call != ''
S5.call.unresolved <- grepl('new',S5.call)
if( S3.call.unresolved ){
S3.call <- paste0('KIR2DS3*',S3.call)
}
if( S5.call.unresolved ){
S5.call <- paste0('KIR2DS5*',S5.call)
}
if( S3.call.bool ){
S3.het.bool <- grepl('+',S3.call,fixed=T)
}
if( S5.call.bool ){
S5.het.bool <- grepl('+',S5.call,fixed=T)
}
if( S3.call.bool & S5.call.bool ){
if( !S3.het.bool ){
S3.allele1.vect <- strsplit(S3.call,' ',fixed=T)[[1]]
if( S3.copy > 1 ){
S3.call.mat <- combinations(length(S3.allele1.vect), S3.copy, S3.allele1.vect,repeats.allowed = T)
S3.call.vect <- apply( S3.call.mat, 1, paste0, collapse='+')
}else{
S3.call.vect <- S3.allele1.vect
}
}else{
S3.hetCall.vect <- tstrsplit(S3.call,' ',fixed=T)
#S3.hetCall.list <- tstrsplit(S3.hetCall.vect,'+',fixed=T)
#S3.allele1.vect <- S3.hetCall.list[[1]]
#S3.allele2.vect <- S3.hetCall.list[[2]]
#S3.call.vect <- apply( unique( expand.grid(S3.hetCall.list) ), 1, function(x) paste0(x,collapse='+'))
S3.call.vect <- unlist( S3.hetCall.vect )
}
if( !S5.het.bool ){
S5.allele1.vect <- strsplit(S5.call,' ',fixed=T)[[1]]
if( S5.copy > 1 ){
S5.call.mat <- combinations(length(S5.allele1.vect), S5.copy, S5.allele1.vect,repeats.allowed = T)
S5.call.vect <- apply( S5.call.mat, 1, paste0, collapse='+')
}else{
S5.call.vect <- S5.allele1.vect
}
}else{
S5.hetCall.vect <- tstrsplit(S5.call,' ',fixed=T)
#S5.hetCall.list <- tstrsplit(S5.hetCall.vect,'+',fixed=T)
#S5.allele1.vect <- S5.hetCall.list[[1]]
#S5.allele2.vect <- S5.hetCall.list[[2]]
#S5.call.vect <- apply( unique( expand.grid(S5.hetCall.list) ), 1, function(x) paste0(x,collapse='+'))
S5.call.vect <- unlist( S5.hetCall.vect )
}
S35.call.mat <- expand.grid(S3.call.vect,S5.call.vect)
S35.call.vect <- apply( S35.call.mat, 1, paste0, collapse='+')
}else if( S3.call.bool & !S5.call.bool ){
if( !S3.het.bool ){
S3.allele1.vect <- strsplit(S3.call,' ',fixed=T)[[1]]
if( S3.copy > 1 ){
S3.call.mat <- combinations(length(S3.allele1.vect), S3.copy, S3.allele1.vect,repeats.allowed = T)
S35.call.vect <- apply( S3.call.mat, 1, paste0, collapse='+')
}else{
S35.call.vect <- apply( expand.grid( S3.allele1.vect, 'KIR2DS35*null' ), 1, paste0, collapse='+' )
}
}else{
S3.hetCall.vect <- tstrsplit(S3.call,' ',fixed=T)
#S3.hetCall.list <- tstrsplit(S3.hetCall.vect,'+',fixed=T)
#S35.call.vect <- apply( unique( expand.grid(S3.hetCall.list) ), 1, function(x) paste0(x,collapse='+') )
S35.call.vect <- unlist( S3.hetCall.vect )
}
}else if(!S3.call.bool & S5.call.bool){
if( !S5.het.bool ){
S5.allele1.vect <- strsplit(S5.call,' ',fixed=T)[[1]]
if( S5.copy > 1 ){
S5.call.mat <- combinations(length(S5.allele1.vect), S5.copy, S5.allele1.vect,repeats.allowed = T)
S35.call.vect <- apply( S5.call.mat, 1, paste0, collapse='+')
}else{
S35.call.vect <- apply( expand.grid( S5.allele1.vect, 'KIR2DS35*null' ), 1, paste0, collapse='+' )
}
}else{
S5.hetCall.vect <- tstrsplit(S5.call,' ',fixed=T)
#S5.hetCall.list <- tstrsplit(S5.hetCall.vect,'+',fixed=T)
#S35.call.vect <- apply( unique( expand.grid(S5.hetCall.list) ), 1, function(x) paste0(x,collapse='+'))
#S35.call.vect <- paste(S35.call.vect)
S35.call.vect <- unlist( S5.hetCall.vect )
}
}else if(S3.copy == 0 & S5.copy == 0) {
S35.call.vect <- 'KIR2DS35*null+KIR2DS35*null'
}else{
S35.call.vect <- 'failed'
}
if( length(S35.call.vect) > 64 ){
S35.call.str <- 'failed'
}else{
S35.call.str <- paste0(S35.call.vect, collapse=' ')
}
})
iterCall.df$KIR2DS35 <- NA
iterCall.df[names(S35.call.list),'KIR2DS35'] <- unlist( S35.call.list )
return(iterCall.df)
}
pingValid.combineL1S1 <- function( iterCall.df, copyCall.df ){
L1S1.call.list <- sapply( rownames( iterCall.df ), function(x){
S1.call <- iterCall.df[x,'KIR3DS1']
L1.call <- iterCall.df[x,'KIR3DL1']
S1.copy <- copyCall.df[x,'KIR3DS1']
L1.copy <- copyCall.df[x,'KIR3DL1']
if(S1.copy == 'R' | L1.copy == 'R'){
return('failed')
}else{
S1.copy <- as.integer(S1.copy)
L1.copy <- as.integer(L1.copy)
}
S1.call.bool <- !is.na(S1.call) & S1.call != 'failed' & S1.call != ''
S1.call.unresolved <- grepl('new',S1.call)
L1.call.bool <- !is.na(L1.call) & L1.call != 'failed' & L1.call != ''
L1.call.unresolved <- grepl('new',L1.call)
if( S1.call.unresolved ){
S1.call <- paste0('KIR3DS1*',S1.call)
}
if( L1.call.unresolved ){
L1.call <- paste0('KIR3DL1*',L1.call)
}
if( S1.call.bool ){
S1.het.bool <- grepl('+',S1.call,fixed=T)
}
if( L1.call.bool ){
L1.het.bool <- grepl('+',L1.call,fixed=T)
}
if( S1.call.bool & L1.call.bool ){
if( !S1.het.bool ){
S1.allele1.vect <- strsplit(S1.call,' ',fixed=T)[[1]]
if( S1.copy > 1 ){
S1.call.mat <- combinations(length(S1.allele1.vect), S1.copy, S1.allele1.vect,repeats.allowed = T)
S1.call.vect <- apply( S1.call.mat, 1, paste0, collapse='+')
}else{
S1.call.vect <- S1.allele1.vect
}
}else{
S1.hetCall.vect <- tstrsplit(S1.call,' ',fixed=T)
S1.call.vect <- unlist( S1.hetCall.vect )
}
if( !L1.het.bool ){
L1.allele1.vect <- strsplit(L1.call,' ',fixed=T)[[1]]
if( L1.copy > 1 ){
L1.call.mat <- combinations(length(L1.allele1.vect), L1.copy, L1.allele1.vect,repeats.allowed = T)
L1.call.vect <- apply( L1.call.mat, 1, paste0, collapse='+')
}else{
L1.call.vect <- L1.allele1.vect
}
}else{
L1.hetCall.vect <- tstrsplit(L1.call,' ',fixed=T)
L1.call.vect <- unlist( L1.hetCall.vect )
}
L1S1.call.mat <- expand.grid(S1.call.vect,L1.call.vect)
L1S1.call.vect <- apply( L1S1.call.mat, 1, paste0, collapse='+')
}else if( S1.call.bool & !L1.call.bool ){
if( !S1.het.bool ){
S1.allele1.vect <- strsplit(S1.call,' ',fixed=T)[[1]]
if( S1.copy > 1 ){
S1.call.mat <- combinations(length(S1.allele1.vect), S1.copy, S1.allele1.vect,repeats.allowed = T)
L1S1.call.vect <- apply( S1.call.mat, 1, paste0, collapse='+')
}else{
L1S1.call.vect <- apply( expand.grid( S1.allele1.vect, 'KIR3DL1S1*null' ), 1, paste0, collapse='+' )
}
}else{
S1.hetCall.vect <- tstrsplit(S1.call,' ',fixed=T)
L1S1.call.vect <- unlist( S1.hetCall.vect )
}
}else if(!S1.call.bool & L1.call.bool){
if( !L1.het.bool ){
L1.allele1.vect <- strsplit(L1.call,' ',fixed=T)[[1]]
if( L1.copy > 1 ){
L1.call.mat <- combinations(length(L1.allele1.vect), L1.copy, L1.allele1.vect,repeats.allowed = T)
L1S1.call.vect <- apply( L1.call.mat, 1, paste0, collapse='+')
}else{
L1S1.call.vect <- apply( expand.grid( L1.allele1.vect, 'KIR3DL1S1*null' ), 1, paste0, collapse='+' )
}
}else{
L1.hetCall.vect <- tstrsplit(L1.call,' ',fixed=T)
L1S1.call.vect <- unlist( L1.hetCall.vect )
}
}else if(S1.copy == 0 & L1.copy == 0) {
L1S1.call.vect <- 'KIR3DL1S1*null+KIR3DL1S1*null'
}else{
L1S1.call.vect <- 'failed'
}
if( length(L1S1.call.vect) > 64 ){
L1S1.call.str <- 'failed'
}else{
L1S1.call.str <- paste0(L1S1.call.vect, collapse=' ')
}
return(L1S1.call.str)
})
iterCall.df$KIR3DL1S1 <- NA
iterCall.df[names(L1S1.call.list),'KIR3DL1S1'] <- unlist( L1S1.call.list )
return(iterCall.df)
}
pingValid.otherLoci <- function( iterCall.df, copyCall.df ){
lociVect <- colnames(iterCall.df)
lociVect <- lociVect[ !lociVect %in% c('KIR3DL1S1','KIR2DS35','KIR3DL1S1','KIR2DS3','KIR2DS5')]
for( currentLocus in lociVect ){
#cat("\n",currentLocus)
locus.call.list <- sapply( rownames( iterCall.df ), function(x){
#cat('\n\t',x)
locus.call <- iterCall.df[x,currentLocus]
if(currentLocus == 'KIR2DL23'){
L2.copy <- copyCall.df[x,'KIR2DL2']
L3.copy <- copyCall.df[x,'KIR2DL3']
if( L2.copy == 'R' | L3.copy == 'R' ){
return('failed')
}else{
locus.copy <- as.integer(L2.copy) + as.integer(L3.copy)
}
}else{
locus.copy <- copyCall.df[x,currentLocus]
if( locus.copy == 'R' ){
return('failed')
}else{
locus.copy <- as.integer(locus.copy)
}
}
locus.call.bool <- !is.na(locus.call) & locus.call != 'failed' & locus.call != ''
locus.call.unresolved <- grepl('new',locus.call)
if( locus.call.unresolved ){
locus.call <- paste0(currentLocus,'*',locus.call)
}
if( locus.call.bool ){
locus.het.bool <- grepl('+',locus.call,fixed=T)
}
if( locus.call.bool ){
if( !locus.het.bool ){
locus.allele1.vect <- strsplit(locus.call,' ',fixed=T)[[1]]
if( locus.copy > 1 ){
locus.call.mat <- combinations(length(locus.allele1.vect), locus.copy, locus.allele1.vect,repeats.allowed = T)
locus.call.vect <- apply( locus.call.mat, 1, paste0, collapse='+')
}else{
locus.call.vect <- apply( expand.grid( locus.allele1.vect, paste0(currentLocus,'*null') ), 1, paste0, collapse='+' )
#locus.call.vect <- locus.allele1.vect
}
}else{
locus.hetCall.vect <- tstrsplit(locus.call,' ',fixed=T)
#locus.hetCall.list <- tstrsplit(locus.hetCall.vect,'+',fixed=T)
#locus.call.vect <- apply( unique( expand.grid(locus.hetCall.list) ), 1, function(x) paste0(x,collapse='+'))
locus.call.vect <- unlist( locus.hetCall.vect )
}
}else if(locus.copy == 0){
locus.call.vect <- paste0(currentLocus,'*null+',currentLocus,'*null')
}else{
locus.call.vect <- 'failed'
}
if( length(locus.call.vect) > 64 ){
locus.call.str <- 'failed'
}else{
locus.call.str <- paste0(locus.call.vect, collapse=' ')
}
return(locus.call.str)
})
iterCall.df[names(locus.call.list),currentLocus] <- unlist( locus.call.list )
}
return(iterCall.df)
}
og.validGenoCall.df <- validGenoCall.df
validGenoCall.df <- pingValid.combineS35( validGenoCall.df, validCopyCall.df )
validGenoCall.df <- pingValid.combineL1S1( validGenoCall.df, validCopyCall.df )
validGenoCall.df <- pingValid.otherLoci( validGenoCall.df, validCopyCall.df )
valid.mod.locusVect <- c("KIR2DP1","KIR2DS2","KIR2DL4","KIR3DL3","KIR3DL2","KIR2DS4",
"KIR2DL1","KIR2DS1","KIR2DL5","KIR2DL23","KIR2DS35","KIR3DL1S1")
validGenoCall.df <- validGenoCall.df[,valid.mod.locusVect]
# ----- Formatting for validation comparison -----
sharedSampleID.vect <- intersect(rownames(iterCall.df), rownames(validGenoCall.df))
iterCall.dt <- synSeq.formatResultGeno( iterCall.df[sharedSampleID.vect,], copyCall.df[sharedSampleID.vect,] )
validGenoCall.dt <- synSeq.formatResultGeno( validGenoCall.df[sharedSampleID.vect,], validCopyCall.df[sharedSampleID.vect,] )
# Copy concordance
copyCon.list <- pingValid.copyConcordance( copyCall.df, validCopyCall.df )
# Copy concordance
pingValid.copyConcordance <- function( pingCopy.df, validCopy.df ){
locusVect <- intersect( colnames(pingCopy.df), colnames(validCopy.df) )
sampleVect <- intersect( rownames(pingCopy.df), rownames(validCopy.df) )
out.copyConc.list <- list()
for( currentLocus in locusVect ){
sampleVect.noR <- sampleVect[ validCopy.df[sampleVect,currentLocus] != 'R' ]
concVect <- as.integer( validCopy.df[sampleVect.noR,currentLocus] ) == as.integer( pingCopy.df[sampleVect.noR,currentLocus ])
matchN <- sum(concVect)
totalN <- length(concVect)
if( any(!concVect) ){
mismatchID.vect <- sampleVect.noR[ which( !concVect ) ]
}else{
mismatchID.vect <- NA
}
cat(paste0('\n',currentLocus,'\t',matchN,'\t',totalN,'\t',round(matchN/totalN,3)))
out.copyConc.list[[currentLocus]] <- list('matchN'=matchN,'totalN'=totalN,mismatchIDVect=mismatchID.vect)
}
return(out.copyConc.list)
}
copyCon.list <- pingValid.copyConcordance( copyCall.df, validCopyCall.df )
pingValid.genoConcordanceMakeup <- function( genoCall.dt, validCall.dt, kirRes = 3, score.copy4 = F){
#genoKey.dt <- as.data.table( t( sapply( genoCopyKey.list, function(x) x$genoList ) ) )
#genoKey.dt$sampleID <- names(genoCopyKey.list)
sampleIDVect <- intersect( validCall.dt$sampleID, genoCall.dt$sampleID )
orderedIDVect <- sampleIDVect[order(sampleIDVect)]
locusVect <- intersect( colnames(validCall.dt), colnames(genoCall.dt) )
locusVect <- setdiff( locusVect, 'sampleID' )
out.list <- list()
for(currentLocus in locusVect){
locusConcordanceList <- lapply(orderedIDVect, function(currentID){
keyList <- validCall.dt[sampleID == currentID,..currentLocus][[1]]
callList <- genoCall.dt[sampleID == currentID,..currentLocus][[1]]
if( 'failed' %in% keyList[[1]] ){
return(list('matchN'=0,'totalN'=0,
'unresolvedN'=0,
'allele.mismatchN'=0,
'mismatchID'=NA))
}else if( any(grepl('new', keyList[[1]])) ){
return(list('matchN'=0,'totalN'=0,
'unresolvedN'=0,
'allele.mismatchN'=0,
'mismatchID'=NA))
}else if( any( grepl('unresolved', keyList[[1]]) ) ){
return(list('matchN'=0,'totalN'=0,
'unresolvedN'=0,
'allele.mismatchN'=0,
'mismatchID'=NA))
}
if( !score.copy4 ){
if( length(keyList[[1]]) > 3 ){
return(list('matchN'=0,'totalN'=0,
'unresolvedN'=0,
'allele.mismatchN'=0,
'mismatchID'=NA))
}
}
concordanceList <- apply(callList[[1]], 1, function(alleleVect){
alleleVect <- sapply(alleleVect, kir.allele_resolution, kirRes)
keyAlleleVect <- sapply(keyList[[1]], kir.allele_resolution, kirRes)
origin.alleleVect <- alleleVect
matchVect <- c()
for( compAllele in keyAlleleVect ){
if(compAllele %in% alleleVect){
compAllele.matchInd <- which( alleleVect == compAllele )[1]
matchVect <- c(matchVect,compAllele)
alleleVect <- alleleVect[-compAllele.matchInd]
}
if(length(alleleVect) == 0){
break
}
}
matchN <- length(matchVect)
unresolvedN <- sum(grepl('*unr', origin.alleleVect,fixed=T))
unresolvedN <- min( unresolvedN, length(keyAlleleVect) )
allele.mismatchN <- length(keyAlleleVect) - length(matchVect) - unresolvedN
if( allele.mismatchN < 0 ){
cat('\nnegative mismatch',currentID,currentLocus)
}
#fw.matchN <- sum( alleleVect %in% keyAlleleVect )
#rv.matchN <- sum( keyAlleleVect %in% alleleVect )
#matchN <- min(fw.matchN, rv.matchN)
totalN <- ncol(keyList[[1]])
#fw.null.match <- sum( grepl('*null',alleleVect) )
#fw.matchVect <- keyAlleleVect[ keyAlleleVect %in% alleleVect ]
#rv.matchVect <- alleleVect[ alleleVect %in% keyAlleleVect ]
#null.match <- sum(grepl('*null',matchVect))
#allele.match <- length(matchVect) - null.match
#matchN <- min( matchN, totalN )
#callCopy <- ncol(callList[[1]])
#copyDiff <- abs( totalN - callCopy )
#matchN <- matchN - copyDiff
#matchN <- max(0, matchN)
#if(currentLocus == 'KIR2DL23'){
#  copyNumber <- 2
#}else if(currentLocus == 'KIR3DL1' | currentLocus == 'KIR3DS1'){
#  copyNumber <- as.integer(genoCopyKey.list[[currentID]]$copyList[['KIR3DL1']])
#  copyNumber <- copyNumber + as.integer(genoCopyKey.list[[currentID]]$copyList[['KIR3DS1']])
#}else{
#  copyNumber <- as.integer(genoCopyKey.list[[currentID]]$copyList[[currentLocus]])
#}
#if(copyNumber > 2){
#  return(list('matchN'=0,'totalN'=0))
#}else{
if(matchN > totalN){
cat('\noverN',currentID,currentLocus)
}
return(list('matchN'=matchN,'totalN'=totalN,
'unresolvedN'=unresolvedN,
'allele.mismatchN'=allele.mismatchN))
#return(list('matchN'=matchN,'totalN'=totalN))
#}
})
matchN <- max( sapply( concordanceList, function(x){x$matchN} ) )
matchInd <- which( sapply( concordanceList, function(x) x$matchN == matchN ) )[1]
matchResult <- concordanceList[[matchInd]]
totalN <- matchResult$totalN
unresolvedN <- matchResult$unresolvedN
allele.mismatchN <- matchResult$allele.mismatchN
#totalN <- max( sapply( concordanceList, function(x){x$totalN} ) )
if( matchN != totalN ){
mismatchID <- currentID
}else{
mismatchID <- NA
}
return(list('matchN'=matchN,'totalN'=totalN,
'unresolvedN'=unresolvedN,
'allele.mismatchN'=allele.mismatchN,
'mismatchID'=mismatchID))
#return(list('matchN'=matchN,'totalN'=totalN,'mismatchID'=mismatchID))
})
matchN <- sum( sapply(locusConcordanceList, function(x) x$matchN ) )
totalN <- sum( sapply(locusConcordanceList, function(x) x$totalN ) )
unresolvedN <- sum( sapply(locusConcordanceList, function(x) x$unresolvedN ) )
allele.mismatchN <- sum( sapply(locusConcordanceList, function(x) x$allele.mismatchN ) )
mismatchIDVect <- unique( sapply( locusConcordanceList, function(x) x$mismatchID ) )
mismatchIDVect <- mismatchIDVect[ !is.na(mismatchIDVect) ]
percMatch <- round(matchN/totalN,3)
matchMessageStr <- paste(currentLocus, percMatch, totalN, sep='\t')
cat('\n',matchMessageStr)
out.list[[currentLocus]] <- list('N'=totalN,'match'=matchN,'unresolved'=unresolvedN,
'alleleMismatch'=allele.mismatchN,'mismatchIDs'=mismatchIDVect)
#out.list[[currentLocus]] <- list('N'=totalN,'match'=matchN,'percentage'=percMatch,'mismatchIDs'=mismatchIDVect)
}
return(out.list)
}
genoConMakup.list <- pingValid.genoConcordanceMakeup( iterCall.dt, validGenoCall.dt, kirRes = 3, score.copy4 = F )
for( currentLocus in names( genoConMakup.list ) ){
matchN <- genoConMakup.list[[currentLocus]]$match
totalN <- genoConMakup.list[[currentLocus]]$N
unresolvedN <- genoConMakup.list[[currentLocus]]$unresolved
percMatch <- round(matchN / (totalN - unresolvedN),digits = 3)
cat(paste0('\n',currentLocus,'\t',percMatch,'\t',(totalN - unresolvedN)))
}
gene <- sort( rep( names( genoConMakup.list ), 3) )
condition <- rep( c('match','unresolved','alleleMismatch'), length(names(genoConMakup.list)) )
value <- c()
for( currentLocus in unique(gene) ){
for( currentCondition in unique(condition) ){
value <- c(value, genoConMakup.list[[currentLocus]][[currentCondition]])
}
}
plotData.380 <- data.frame(gene, condition, value)
plotData.380$condition <- factor( plotData.380$condition, levels=c('alleleMismatch','unresolved','match'))
# ----- European cohort concordance table -----
for( currentLocus in unique(plotData.380$gene) ){
sub.df <- plotData.380[plotData.380$gene == currentLocus,c('condition','value'),drop=F]
totalN <- sum(sub.df$value)
valueVect <- sub.df$value / totalN
cat(paste0('\n',currentLocus,'\t',paste0(round(valueVect,3),collapse='\t'),'\t',totalN))
}
resultsDirectory <- 'discordance_analysis/'
# ----- Graph mismapped read counts -----
incoming.df <- read.csv('discordance_analysis/syn.incoming.csv',check.names=F,row.names=1)
outgoing.df <- read.csv('discordance_analysis/syn.outgoing.csv',check.names=F,row.names=1)
validCopy.syn.df
write.csv(validCopy.syn.df, '~/Desktop/synCopy.valid.csv')
